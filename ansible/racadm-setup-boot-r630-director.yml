---

# R620 hosts
#   foreman:  NIC.Integrated.1-3-1,HardDisk.List.1-1,NIC.Slot.2-4,NIC.Slot.2-1,NIC.Slot.2-2,NIC.Slot.2-3
#   director: NIC.Slot.2-4,HardDisk.List.1-1,NIC.Slot.2-1,NIC.Slot.2-2,NIC.Slot.2-3,NIC.Integrated.1-3-1
#
# R630 hosts:
#   foreman:  NIC.Slot.2-1-1,HardDisk.List.1-1,NIC.Integrated.1-2-1
#   director: NIC.Integrated.1-2-1,HardDisk.List.1-1,NIC.Slot.2-1-1
#
# R720xd:
#   foreman:  NIC.Integrated.1-3-1,HardDisk.List.1-1,NIC.Slot.4-2-1
#   director: NIC.Slot.4-2-1,HardDisk.List.1-1,NIC.Integrated.1-3-1
#
# R730xd:
#   foreman:  NIC.Integrated.1-3-1,HardDisk.List.1-1,NIC.Integrated.1-2-1
#   director: NIC.Integrated.1-2-1,HardDisk.List.1-1,NIC.Integrated.1-3-1
#
##############################################################################################

- gather_facts: False
  name: check for racadm
  vars:
    untouchables: mgmt-foreman.example.com
  hosts: all:!{{untouchables}}
  vars_files:
    - idrac_interfaces.yml
  tasks:

# try to gracefully shutdown target server
    - name: shutdown underlying OS
      local_action: command ssh -o ConnectTimeout=10 {{ inventory_hostname | regex_replace('mgmt-', '' ) }} shutdown -h now
      ignore_errors: True

# reset the drac
    - name: racadm racreset
      raw: racadm racreset hard -f
      args:
        executable: ''
      register: result_racreset
    - debug: var=result_racreset

# pause
    - name: pause for reset
      pause:
          minutes: 3

# Delete the jobqueue so we can search it reliably later
    - name: racadm jobqueue delete
      raw: racadm jobqueue delete --all
      args:
        executable: ''
      register: result_jobqueue
    - debug: var=result_jobqueue

# use the hammer
    - name: racadm JID_CLEARALL_FORCE
      raw: racadm jobqueue delete -i JID_CLEARALL_FORCE
      args:
        executable: ''
      register: result_clearall_force
    - debug: var=result_clearall_force

# pause
    - name: pause for reset
      pause:
          minutes: 1

# setup the new boot order to ensure 1st nic is before disk
    - name: racadm setup boot
      raw: racadm set BIOS.BiosBootSettings.BootSeq {{director_r630_interfaces}}
      args:
        executable: ''
      register: result_boot_setup
    - debug: var=result_boot_setup

# Commit the changes to the bios
    - name: racadm bios reconfigure powercycle
      raw: racadm jobqueue create BIOS.Setup.1-1 -r pwrcycle -s TIME_NOW
      ignore_errors: yes
      args:
        executable: ''
      register: result_pwrcycle
    - debug: var=result_pwrcycle

# power cycle the host
    - name: racadm serveraction powercycle
      raw: racadm serveraction powercycle
      ignore_errors: yes
      args:
        executable: ''
      register: result_pwrcycle
    - debug: var=result_pwrcycle

# Now wait for the jobqueue to finish
    - name: racadm check complete
      raw: racadm jobqueue view
      ignore_errors: yes
      args:
        executable: ''
      register: result_check_complete
      until: result_check_complete.stdout.find("Status=Completed") != -1 and result_check_complete.stdout.find("Status=Running") == -1
      retries: 50
      delay: 10
    - debug: var=result_check_complete

# Test that our settings actually took
    - name: retrieve the actual boot settings via racadm
      raw: racadm get BIOS.BiosBootSettings.BootSeq
      args:
        executable: ''
      register: racadm_boot_results
      until: racadm_boot_results.stdout.find("BootSeq={{director_r630_interfaces}}") != -1
      retries: 50
      delay: 10
    - debug: var=racadm_boot_results

# Record when we are finished
    - name: Generate Time of Completion
      local_action: command date +%Y-%m-%d-%H:%M
      register: currentdate

    - name: Print Time of Completion
      debug:
        msg="{{ currentdate.stdout }} , Ansible Playbook for {{ ansible_host }} completed"
