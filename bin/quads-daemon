#!/usr/bin/env python
# This file is part of QUADs.
#
# QUADs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# QUADs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with QUADs.  If not, see <http://www.gnu.org/licenses/>.


from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from SocketServer import ThreadingMixIn
from lib.Foreman import Foreman
from lib.Quads import Quads
from lib.tools.regenerate_vlans_wiki import regenerate_vlans_wiki

import time
import yaml
import argparse
import os
import sys
import logging
import re
import cgi
import json
import threading
import Reservation_report
import subprocess

logger = logging.getLogger('quads')
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')


# Some read functions are done via GET while others that require parameters
# are handled as POST requests. All updates are handled as POST requests.

class HTTPRequestHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        global write_lock
        # reload data if needed and log
        if quads.config_newer_than_data():
            logger.info("config file %s changed on disk. Reloading..." % quads.config)
            quads.read_data()
        # handle lsowner
        if None != re.search('/api/v1/lsowner', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
            else:
                data = {}
            logger.info("%s - %s - %s %s" % (self.client_address[0],
                                             self.command,
                                             self.path, json.dumps(data)))
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            if 'cloudonly' in data:
                self.wfile.write(json.dumps({'owner': quads.get_owners(data['cloudonly'][0])}))
            else:
                self.wfile.write(json.dumps({'owners': quads.get_owners(None)}))
            return

        # handle lsccuser
        if None != re.search('/api/v1/lsccusers', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
            else:
                data = {}
            logger.info("%s - %s - %s %s" % (self.client_address[0],
                                             self.command,
                                             self.path, json.dumps(data)))
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            if 'cloudonly' in data:
                self.wfile.write(json.dumps({'ccuser': quads.get_cc(data['cloudonly'][0])}))
            else:
                self.wfile.write(json.dumps({'ccusers': quads.get_cc(None)}))
            return

        # handle lstickets
        if None != re.search('/api/v1/lstickets', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
            else:
                data = {}
            logger.info("%s - %s - %s %s" % (self.client_address[0],
                                             self.command,
                                             self.path, json.dumps(data)))
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            if 'cloudonly' in data:
                self.wfile.write(json.dumps({'ticket': quads.get_tickets(data['cloudonly'][0])}))
            else:
                self.wfile.write(json.dumps({'tickets': quads.get_tickets(None)}))
            return

        # handle qinqs
        if None != re.search('/api/v1/lsqinq', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
            else:
                data = {}
            logger.info("%s - %s - %s %s" % (self.client_address[0],
                                             self.command,
                                             self.path, json.dumps(data)))
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            if 'cloudonly' in data:
                self.wfile.write(json.dumps({'qinq': quads.get_qinq(data['cloudonly'][0])}))
            else:
                self.wfile.write(json.dumps({'qinqs': quads.get_qinq(None)}))
            return

        # handle wipes
        if None != re.search('/api/v1/lswipe', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
            else:
                data = {}
            logger.info("%s - %s - %s %s" % (self.client_address[0],
                                             self.command,
                                             self.path, json.dumps(data)))
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            if 'cloudonly' in data:
                self.wfile.write(json.dumps({'wipe': quads.get_wipe(data['cloudonly'][0])}))
            else:
                self.wfile.write(json.dumps({'wipes': quads.get_wipe(None)}))
            return

        # handle host additions
        if None != re.search('/api/v1/host', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path, json.dumps(data)))
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                result = []
                if 'host' not in data:
                    result.append("Missing required parameter: host")
                else:
                    if len(data['host']) == 0:
                        result.append("Could not parse host parameter")
                if 'cloud' not in data:
                    result.append("Missing required parameter: cloud")
                else:
                    if len(data['cloud']) == 0:
                        result.append("Could not parse cloud parameter")
                if 'force' not in data:
                    result.append("Missing required parameter: force")
                else:
                    if len(data['force']) == 0:
                        result.append("Could not parse force parameter")
                if 'type' not in data:
                    result.append("Missing required parameter: type")
                else:
                    if len(data['type']) == 0:
                        result.append("Could not parse type parameter")
                if len(result) > 0:
                    self.wfile.write(json.dumps({'result': result}))
                    return

                write_lock.acquire()
                result = quads.update_host(data['host'][0],
                                           data['cloud'][0],
                                           data['type'][0],
                                           data['force'][0] == 'True')
                write_lock.release()
                self.wfile.write(json.dumps({'result': result}))
                return
            else:
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path,
                                                 "400 Bad Request"))
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'result': ['400 Bad Request']}))
            return

        # handle host deletion
        if None != re.search('/api/v1/rmhost', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path, json.dumps(data)))
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                result = []
                if 'host' not in data:
                    result.append("Missing required parameter: host")
                else:
                    if len(data['host']) == 0:
                        result.append("Could not parse host parameter")
                if len(result) > 0:
                    self.wfile.write(json.dumps({'result': result}))
                    return
                write_lock.acquire()
                result = quads.remove_host(data['host'][0])
                write_lock.release()
                self.wfile.write(json.dumps({'result': result}))
                return
            else:
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path,
                                                 "400 Bad Request"))
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'result': ['400 Bad Request']}))
            return

        # handle cloud additions
        if None != re.search('/api/v1/cloud', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path, json.dumps(data)))
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                result = []
                # cloudresource, description, forceupdate, cloudowner, ccusers, cloudticket, qinq, wipe
                if 'cloud' not in data:
                    result.append("Missing required parameter: cloud")
                else:
                    if len(data['cloud']) == 0:
                        result.append("Could not parse cloud parameter")
                if 'description' not in data:
                    result.append("Missing required parameter: description")
                else:
                    if len(data['description']) == 0:
                        result.append("Could not parse description parameter")
                if 'force' not in data:
                    result.append("Missing required parameter: force")
                else:
                    if len(data['force']) == 0:
                        result.append("Could not parse force parameter")
                if 'owner' not in data:
                    data['owner'] = ['nobody']
                else:
                    if len(data['owner']) == 0:
                        result.append("Could not parse owner parameter")
                if 'cc' not in data:
                    data['cc'] = [[]]
                else:
                    if len(data['cc']) == 0:
                        result.append("Could not parse cc parameter")
                if 'ticket' not in data:
                    data['ticket'] = ['000000']
                else:
                    if len(data['ticket']) == 0:
                        result.append("Could not parse ticket parameter")
                if 'qinq' not in data:
                    data['qinq'] = ['0']
                else:
                    if len(data['qinq']) == 0:
                        result.append("Could not parse qinq parameter")
                if len(result) > 0:
                    self.wfile.write(json.dumps({'result': result}))
                    return
                if 'wipe' not in data:
                    data['wipe'] = ['1']
                else:
                    if len(data['wipe']) == 0:
                        result.append("Could not parse wipe parameter")
                if len(result) > 0:
                    self.wfile.write(json.dumps({'result': result}))
                    return
                write_lock.acquire()
                result = quads.update_cloud(data['cloud'][0],
                                            data['description'][0],
                                            data['force'][0] == 'True',
                                            data['owner'][0],
                                            data['cc'][0],
                                            data['ticket'][0],
                                            data['qinq'][0],
                                            data['wipe'][0])
                self.wfile.write(json.dumps({'result': result}))
                write_lock.release()
                if data['extnet']:
                    vlans_conf = os.path.dirname(__file__) + "/../conf/vlans.yml"

                    try:
                        with open(vlans_conf, 'r') as _vlans_read:
                            try:
                                vlans = yaml.safe_load(_vlans_read)
                            except yaml.YAMLError:
                                print "quads: Invalid YAML config: " + vlans_conf
                                exit(1)
                            for vlan, properties in vlans.iteritems():
                                if data["extnet"] == properties["id"]:
                                    properties["cloud"] = data['cloud'][0]
                                    properties["owner"] = data['owner'][0]
                                    properties["ticket"] = data['ticket'][0]
                                    try:
                                        with open(vlans_conf, 'w') as _vlans_write:
                                            yaml.dump(vlans, _vlans_write, default_flow_style=False)
                                    except yaml.YAMLError:
                                        print "quads: Could not write to YAML config: " + vlans_conf
                                        exit(1)
                                    vlans_dir = os.path.join(quads_config["data_dir"], "vlans")
                                    if not os.path.exists(vlans_dir):
                                        os.makedirs(vlans_dir)
                                    stub = os.path.join(vlans_dir, "%s-vlan%s-%s-%s" % (
                                        data["cloud"],
                                        data["extnet"],
                                        data["owner"],
                                        data['ticket'],
                                    ))
                                    if not os.path.exists(stub):
                                        with open(stub, "a") as _:
                                            os.utime(stub, None)

                        regenerate_vlans_wiki()

                    except IOError:
                        print "Error reading %s" % vlans_conf
                        exit(1)

                return
            else:
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path,
                                                 "400 Bad Request"))
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'result': ['400 Bad Request']}))
            return

        # handle cloud deletion
        if None != re.search('/api/v1/rmcloud', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path, json.dumps(data)))
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                result = []
                if 'cloud' not in data:
                    result.append("Missing required parameter: cloud")
                else:
                    if len(data['cloud']) == 0:
                        result.append("Could not parse cloud parameter")
                if len(result) > 0:
                    self.wfile.write(json.dumps({'result': result}))
                    return
                write_lock.acquire()
                result = quads.remove_cloud(data['cloud'][0])
                write_lock.release()
                self.wfile.write(json.dumps({'result': result}))
                return
            else:
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path,
                                                 "400 Bad Request"))
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'result': ['400 Bad Request']}))
            return

        # handle host schedule additions (ahs = add host schedule)
        if None != re.search('/api/v1/ahs', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path, json.dumps(data)))
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                result = []
                # schedstart, schedend, schedcloud, host
                if 'start' not in data:
                    result.append("Missing required parameter: start")
                else:
                    if len(data['start']) == 0:
                        result.append("Could not parse start parameter")
                if 'end' not in data:
                    result.append("Missing required parameter: end")
                else:
                    if len(data['end']) == 0:
                        result.append("Could not parse end parameter")
                if 'cloud' not in data:
                    result.append("Missing required parameter: cloud")
                else:
                    if len(data['cloud']) == 0:
                        result.append("Could not parse cloud parameter")
                if 'host' not in data:
                    result.append("Missing required parameter: host")
                else:
                    if len(data['host']) == 0:
                        result.append("Could not parse host parameter")
                    # hotfix for not scheduling broken hosts
                    # foreman_check_host_health: true enables health checks
                    # prior to adding host schedules, see conf/quads.yml
                    foreman_host_check = quads_config["foreman_check_host_health"]
                    if foreman_host_check:
                        foreman = Foreman(
                            quads_config["foreman_api_url"],
                            quads_config["foreman_username"],
                            quads_config["foreman_password"]
                        )
                        broken_hosts = foreman.get_broken_hosts()
                        if broken_hosts.get(data['host'][0], False):
                            result.append("Host %s is in broken state" % data['host'][0])

                if len(result) > 0:
                    self.wfile.write(json.dumps({'result': result}))
                    return
                write_lock.acquire()
                result = quads.add_host_schedule(data['start'][0],
                                                 data['end'][0],
                                                 data['cloud'][0],
                                                 data['host'][0])
                write_lock.release()
                self.wfile.write(json.dumps({'result': result}))
                return
            else:
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path,
                                                 "400 Bad Request"))
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'result': ['400 Bad Request']}))
            return

        # handle host schedule removal (rhs = rm host schedule)
        if None != re.search('/api/v1/rhs', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path, json.dumps(data)))
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                result = []
                # rm_host_schedule(self, rmschedule, host):
                if 'schedule' not in data:
                    result.append("Missing required parameter: schedule")
                else:
                    if len(data['schedule']) == 0:
                        result.append("Could not parse schedule parameter")
                if 'host' not in data:
                    result.append("Missing required parameter: host")
                else:
                    if len(data['host']) == 0:
                        result.append("Could not parse host parameter")
                if len(result) > 0:
                    self.wfile.write(json.dumps({'result': result}))
                    return
                write_lock.acquire()
                result = quads.rm_host_schedule(int(data['schedule'][0]),
                                                data['host'][0])
                write_lock.release()
                self.wfile.write(json.dumps({'result': result}))
                return
            else:
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path,
                                                 "400 Bad Request"))
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'result': ['400 Bad Request']}))
            return

        # handle host schedule mods (mhs = mod host schedule)
        if None != re.search('/api/v1/mhs', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path, json.dumps(data)))
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                result = []
                # mod_host_schedule(self, modschedule, schedstart, schedend, schedcloud, host)
                if 'schedule' not in data:
                    result.append("Missing required parameter: schedule")
                else:
                    if len(data['schedule']) == 0:
                        result.append("Could not parse schedule parameter")
                if 'host' not in data:
                    result.append("Missing required parameter: host")
                else:
                    if len(data['host']) == 0:
                        result.append("Could not parse host parameter")
                if 'start' not in data and 'end' not in data and 'cloud' not in data:
                    result.append("Must have at least one of: start, end, cloud")
                if 'start' in data:
                    if len(data['start']) == 0:
                        result.append("Could not parse start parameter")
                    else:
                        if data['start'][0] == 'None':
                            data['start'][0] = None
                else:
                    data['start'] = [None]
                if 'end' in data:
                    if len(data['end']) == 0:
                        result.append("Could not parse end parameter")
                    else:
                        if data['end'][0] == 'None':
                            data['end'][0] = None
                else:
                    data['end'] = [None]
                if 'cloud' in data:
                    if len(data['cloud']) == 0:
                        result.append("Could not parse cloud parameter")
                    else:
                        if data['cloud'][0] == 'None':
                            data['cloud'][0] = None
                else:
                    data['cloud'] = [None]
                if len(result) > 0:
                    self.wfile.write(json.dumps({'result': result}))
                    return
                write_lock.acquire()
                result = quads.mod_host_schedule(int(data['schedule'][0]),
                                                 data['start'][0],
                                                 data['end'][0],
                                                 data['cloud'][0],
                                                 data['host'][0])
                write_lock.release()
                self.wfile.write(json.dumps({'result': result}))
                return
            else:
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path,
                                                 "400 Bad Request"))
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'result': ['400 Bad Request']}))
            return

        # handle pending moves
        if None != re.search('/api/v1/moves', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path, json.dumps(data)))
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                result = []
                # statedir, datearg
                if 'date' not in data:
                    data['date'] = [time.strftime("%Y-%m-%d %H:%M")]
                else:
                    if len(data['date']) == 0:
                        result.append("Could not parse date parameter")
                if 'statedir' not in data:
                    result.append("Missing required parameter: statedir")
                else:
                    if len(data['statedir']) == 0:
                        result.append("Could not parse statedir parameter")
                if len(result) > 0:
                    self.wfile.write(json.dumps({'result': result}))
                    return
                result = quads.pending_moves(data['statedir'][0],
                                             data['date'][0])
                self.wfile.write(json.dumps({'result': result}))
                return
            else:
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path,
                                                 "400 Bad Request"))
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'result': ['400 Bad Request']}))
            return

        # handle query
        if None != re.search('/api/v1/query', self.path):
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'application/json':
                if self.headers.getheader('content-length'):
                    length = int(self.headers.getheader('content-length'))
                else:
                    length = 0
                data = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path, json.dumps(data)))
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                result = []
                # query( host, cloudonly, datearg, summaryreport, fullsummaryreport, lsschedule)
                if 'date' not in data:
                    data['date'] = [None]
                else:
                    if len(data['date']) == 0:
                        result.append("Could not parse date parameter")
                if 'host' not in data:
                    data['host'] = [None]
                else:
                    if len(data['host']) == 0:
                        result.append("Could not parse host parameter")
                if 'cloud' not in data:
                    data['cloud'] = [None]
                else:
                    if len(data['cloud']) == 0:
                        result.append("Could not parse cloud parameter")
                if 'summary' not in data:
                    data['summary'] = [None]
                else:
                    if len(data['summary']) == 0:
                        result.append("Could not parse summary parameter")
                if 'fullsummary' not in data:
                    data['fullsummary'] = [None]
                else:
                    if len(data['fullsummary']) == 0:
                        result.append("Could not parse fullsummary parameter")
                if 'lsschedule' not in data:
                    data['lsschedule'] = [None]
                else:
                    if len(data['lsschedule']) == 0:
                        result.append("Could not parse lsschedule parameter")
                if len(result) > 0:
                    self.wfile.write(json.dumps({'result': result}))
                    return
                if data['host'][0] is not None:
                    if data['lsschedule'][0] == 'True':
                        default_cloud, current_cloud, current_schedule, full_schedule = quads.query_host_schedule(
                            data['host'][0], data['date'][0])
                        result.append("Default cloud: {}".format(default_cloud))
                        result.append("Current cloud: {}".format(current_cloud))
                        if current_schedule is not None:
                            result.append("Current schedule: {}".format(current_schedule))
                        if len(full_schedule) > 0:
                            for item in full_schedule:
                                for override, schedule in item.iteritems():
                                    output = " {}| ".format(override)
                                    for t, date in schedule.iteritems():
                                        if t == 'start' or t == 'end':
                                            output += "{}={},".format(t, date)
                                        else:
                                            output += "{}={}".format(t, date)
                                    result.append(output)
                    else:
                        result.append(quads.query_host_cloud(data['host'][0], data['date'][0]))
                    self.wfile.write(json.dumps({'result': result}))
                    return

                if data['summary'][0] == 'True' and data['fullsummary'][0] == 'True':
                    result.append("--summary and --full-summary are mutually exclusive.")
                    self.wfile.write(json.dumps({'result': result}))
                    return

                if data['summary'][0] == 'True' or data['fullsummary'][0] == 'True':
                    if data['fullsummary'][0] == 'True':
                        cloud_summary = quads.query_cloud_summary(data['date'][0], False)
                    else:
                        cloud_summary = quads.query_cloud_summary(data['date'][0], True)
                    if len(cloud_summary) > 0:
                        for item in cloud_summary:
                            for cloudname, details in item.iteritems():
                                r = cloudname + " : "
                                for param, description in details.iteritems():
                                    if param == 'hosts':
                                        r += str(description) + " "
                                    else:
                                        if param == 'description':
                                            r += "({})".format(description)
                                result.append(r)
                else:
                    cloud_hosts = quads.query_cloud_hosts(data['date'][0])
                    if data['cloud'][0] is not None:
                        if data['cloud'][0] in cloud_hosts:
                            for host in cloud_hosts[data['cloud'][0]]:
                                result.append(host)
                        else:
                            result.append("Requested cloud does not exist")
                    else:
                        for cloud, hostlist in sorted(cloud_hosts.iteritems()):
                            result.append("{}:".format(cloud))
                            for host in hostlist:
                                result.append(" - {}".format(host))

                self.wfile.write(json.dumps({'result': result}))
                return
            else:
                logger.info("%s - %s - %s %s" % (self.client_address[0],
                                                 self.command,
                                                 self.path,
                                                 "400 Bad Request"))
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'result': ['400 Bad Request']}))
            return

        return

    def do_GET(self):
        global write_lock
        logger.info("%s - %s - %s" % (self.client_address[0],
                                      self.command,
                                      self.path))
        if quads.config_newer_than_data():
            logger.info("config file %s changed on disk. Reloading..." % quads.config)
            quads.read_data()
        if None != re.search('/api/v1/lshosts', self.path):
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'hosts': quads.get_hosts()}))
            return
        if None != re.search('/api/v1/lsclouds', self.path):
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'clouds': quads.get_clouds()}))
            return
        if None != re.search('/api/v1/lsowner', self.path):
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'owners': quads.get_owners(None)}))
            return
        if None != re.search('/api/v1/lsccusers', self.path):
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'ccusers': quads.get_cc(None)}))
            return
        if None != re.search('/api/v1/lstickets', self.path):
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'tickets': quads.get_tickets(None)}))
            return
        if None != re.search('/api/v1/lsqinq', self.path):
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'qinqs': quads.get_qinq(None)}))
            return
        if None != re.search('/api/v1/lswipe', self.path):
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'wipes': quads.get_wipe(None)}))
            return
        if None != re.search('/api/v1/showreserv', self.path):
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(Reservation_report.main()))
            return
        self.send_response(403)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        return


class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    allow_reuse_address = True


class SimpleHttpServer():
    def __init__(self, ip, port):
        self.server = ThreadedHTTPServer((ip, port), HTTPRequestHandler)
        self.server_thread = threading.Thread(target=self.server.serve_forever)

    def start(self):
        self.server_thread.daemon = True
        self.server_thread.start()

    def waitForThread(self):
        self.server_thread.join()


# used to load the configuration for quads behavior
def quads_load_config(_quads_config):
    try:
        with open(_quads_config, 'r') as config_file:
            try:
                quads_config_yaml = yaml.safe_load(config_file)
            except yaml.YAMLError:
                print "quads: Invalid YAML config: " + _quads_config
                exit(1)
    except Exception as ex:
        print ex
        exit(1)
    return quads_config_yaml


quads_config_file = os.path.dirname(__file__) + "/../conf/quads.yml"
quads_config = quads_load_config(quads_config_file)

if "data_dir" not in quads_config:
    print "quads: Missing \"data_dir\" in " + quads_config_file
    exit(1)

if "install_dir" not in quads_config:
    print "quads: Missing \"install_dir\" in " + quads_config_file
    exit(1)

sys.path.append(quads_config["install_dir"] + "/lib")
sys.path.append(os.path.dirname(__file__) + "/../lib")

defaultconfig = quads_config["data_dir"] + "/schedule.yaml"
defaultstatedir = quads_config["data_dir"] + "/state"
defaultmovecommand = None

parser = argparse.ArgumentParser(description='QUADS Daemon')
parser.add_argument('-c', '--config', dest='config',
                    help='YAML file with cluster data',
                    default=defaultconfig, type=str)
parser.add_argument('-i', '--init', dest='initialize', action='store_true', help='initialize the schedule YAML file')
parser.add_argument('--force', dest='force', action='store_true',
                    help='Force host or cloud update when already defined')
parser.add_argument('--statedir', dest='statedir', type=str, default=defaultstatedir, help='Default state dir')
parser.add_argument('--log-path', dest='logpath', type=str, default=None, help='Path to quads log file')
parser.add_argument('--ip', dest='ip', type=str, default='127.0.0.1', help='IP Address to bind to')
parser.add_argument('--port', dest='port', type=int, default=8080, help='Port to use')

args = parser.parse_args()

if args.logpath:
    quads_config["log"] = args.logpath

if not os.path.exists(quads_config["log"]):
    try:
        open(quads_config["log"], 'a').close()
    except Exception:
        print "Log file does not exist : {}".format(quads_config["log"])
        exit(1)

fh = logging.FileHandler(quads_config["log"])
fh.setFormatter(formatter)
fh.setLevel(logging.INFO)
logger.addHandler(fh)

if not os.path.exists(args.statedir):
    try:
        os.makedirs(args.statedir)
    except Exception as ex:
        print ex
        exit(1)

write_lock = threading.RLock()
quads = Quads(args.config, args.statedir, None, None, None, args.initialize, args.force, write_lock)

server = SimpleHttpServer(args.ip, args.port)
logger.info("QUADS daemon started...........".format(quads_config["log"]))
server.start()
server.waitForThread()

exit(0)
