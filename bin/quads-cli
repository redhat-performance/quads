#!/usr/bin/env python3

import argparse
import datetime
import logging
import os
from json import JSONDecodeError
from quads.quads import Api as QuadsApi

import requests
import subprocess
import sys
import yaml


# Load QUADS yaml config
from tools.move_and_rebuild_hosts import move_and_rebuild


def quads_load_config(_quads_config):
    quads_config_yaml = None
    try:
        with open(_quads_config, 'r') as config_file:
            try:
                quads_config_yaml = yaml.safe_load(config_file)
            except yaml.YAMLError:
                print("quads: Invalid YAML config: " + _quads_config)
                exit(1)
    except Exception as ex:
        print(ex)
        exit(1)
    return quads_config_yaml


logger = logging.getLogger('quads')
ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

API = 'v2'


def output_json_result(request, data, debug=False):
    try:
        if request.status_code == 204:
            print('Removed: %s' % data)
        else:
            js = request.json()
            if debug:
                print('%s %s: %s' % (request.status_code, request.reason, data))
            else:
                for result in js['result']:
                    print(result)
    except JSONDecodeError:
        print('Could not parse json reply.')
        if debug:
            print(request.text)
        else:
            print('use --debug to see contents')
        exit(1)


def main(_args):
    # List all common call
    quads = QuadsApi(api_url)

    if _args.action:
        _kwargs = {}
        if _args.cloudonly:
            _kwargs["cloud"] = _args.cloudonly
        if _args.host:
            _kwargs["host"] = _args.host
        if _args.datearg:
            _kwargs["date"] = datetime.datetime.strptime(_args.datearg, '%Y-%m-%d %H:%M').isoformat()

        if _args.action in ['owner', 'ticket', 'qinq', 'wipe']:
            data = quads.get(_args.action)
            if data:
                for k in data:
                    print(str(k['name']) + ": " + str(k[_args.action]))
                exit(0)

        if _args.action == 'interface':
            if _args.host is None:
                print('Missing option. --host option is required for --ls-interface:')
                exit(1)
            data = quads.get_interfaces(**_kwargs)
            if data:
                for interface in data["result"]:
                    print(interface)
                exit(0)

        if _args.action == 'schedule':
            if _args.host:
                _clouds = quads.get_clouds()
                _host = quads.get_hosts(name=_args.host)
                _default_cloud = "Cloud01"
                _current_cloud = _default_cloud
                if _host:
                    if "cloud" in _host:
                        _default_cloud = _host["cloud"]
                print("Default cloud: %s" % _default_cloud)
                _current_schedule = quads.get_current_schedule(**_kwargs)
                if _current_schedule and "result" not in _current_schedule:
                    _cloud_id = _current_schedule[0]["cloud"]
                    cloud_name = next(cloud["name"] for cloud in _clouds if cloud["_id"] == _cloud_id)
                    if cloud_name:
                        _current_cloud = cloud_name
                    if "cloud" in _current_schedule[0] and _current_cloud != _default_cloud:
                        print("Current cloud: %s" % _current_cloud)
                        print("Current schedule: %s" % _current_schedule[0]["index"])
                    else:
                        print("Current cloud: %s" % _default_cloud)
                else:
                    print("Current cloud: %s" % _default_cloud)
                if "date" in _kwargs:
                    _kwargs.pop("date")
                _host_schedules = quads.get_schedules(**_kwargs)
                for schedule in _host_schedules:
                    _cloud_name = ""
                    for cloud in _clouds:
                        if "name" in cloud and cloud["_id"] == schedule["cloud"]:
                            _cloud_name = cloud["name"]
                    start = datetime.datetime.utcfromtimestamp(int(schedule["start"]["$date"]) / 1000)
                    end = datetime.datetime.utcfromtimestamp(int(schedule["end"]["$date"]) / 1000)
                    print(
                        "%s| start=%s, end=%s, cloud=%s" % (
                            schedule["index"],
                            start,
                            end,
                            _cloud_name)
                    )
            else:
                clouds = quads.get_clouds()
                if clouds and "result" not in clouds:
                    for cloud in clouds:
                        _cloud_name = cloud["name"]
                        print("%s:" % _cloud_name)
                        _kwargs["cloud"] = _cloud_name
                        _schedules = quads.get_current_schedule(**_kwargs)
                        if _schedules and "result" not in _schedules:
                            if type(_schedules) == list:
                                for entry in _schedules:
                                    host = quads.get_hosts(id=entry["host"]["$oid"])
                                    print("- %s" % str(host['name']))
                            else:
                                host = quads.get_hosts(id=_schedules["host"]["$oid"])
                                print("- %s" % str(host['name']))

            exit(0)

        elif _args.action in ['host', 'cloud']:
            entries = quads.get(_args.action)
            if entries and "result" not in entries:
                for entry in entries:
                    print(entry['name'])
            elif "result" in entries:
                print(entries['result'])
            exit(0)

        elif _args.action == "available":
            if _args.schedstart is None or _args.schedend is None:
                print('Missing option. All these options are required for --ls-available:')
                print('    --schedule-start')
                print('    --schedule-end')
                exit(1)

            _start = datetime.datetime.strptime(_args.schedstart, '%Y-%m-%d %H:%M').isoformat()
            _end = datetime.datetime.strptime(_args.schedend, '%Y-%m-%d %H:%M').isoformat()

            data = {
                "start": _start,
                "end": _end,
            }

            available_hosts = quads.get_available(**data)

            for host in available_hosts:
                print(host)

            exit(0)

    # Cloud Add / Modify
    elif _args.cloudresource:
        data = {'name': _args.cloudresource,
                'description': _args.description,
                'owner': _args.cloudowner,
                'ccuser': _args.ccusers,
                'qinq': _args.qinq,
                'wipe': _args.wipe,
                'ticket': _args.cloudticket,
                'vlan': _args.vlan,
                'force': _args.force}
        print(quads.insert_cloud(data)["result"])
        exit(0)

    # Cloud Remove
    elif _args.rmcloud is not None:
        url = os.path.join(api_url, 'cloud', _args.rmcloud)
        _response = requests.delete(url)
        output_json_result(_response, {'cloud': _args.rmcloud})
        exit(0)

    # Host Add / Modify
    elif _args.hostresource:
        if _args.cloudresource:
            print('--define-cloud and --define-host are mutually exclusive.')
            exit(1)
        url = os.path.join(api_url, 'host')
        data = {'name': _args.hostresource,
                'default_cloud': _args.hostcloud,
                'host_type': _args.hosttype,
                'force': _args.force}
        _response = requests.post(url, data)
        output_json_result(_response, data)
        exit(0)

    # Host Remove
    elif _args.rmhost is not None:
        url = os.path.join(api_url, 'host', _args.rmhost)
        _response = requests.delete(url)
        output_json_result(_response, {'host': _args.rmhost})
        exit(0)

    # Add Interface
    elif _args.addinterface:
        if _args.ifmac is None \
                or _args.ifip is None or _args.ifport is None \
                or _args.ifvlan is None or _args.host is None:
            print('Missing option. All these options are required for --add-interface:')
            print('    --host')
            print('    --interface-mac')
            print('    --interface-ip')
            print('    --interface-port')
            print('    --interface-vlan')
        url = os.path.join(api_url, 'interfaces')
        data = {
            'name': _args.addinterface,
            'mac_address': _args.ifmac,
            'ip_address': _args.ifip,
            'vlan': _args.ifvlan,
            'switch_port': _args.ifport,
            'host': _args.host,
            'force': _args.force
        }
        _response = requests.post(url, data)
        output_json_result(_response, data)
        exit(0)

    elif _args.rminterface is not None:
        if _args.host is None:
            print('Missing option. --host option is required for --rm-interface:')
            exit(1)
        data = {'host': _args.host, 'name': _args.rminterface}
        print(quads.remove_interface(**data))
        exit(0)

    # Add Schedule
    elif _args.addschedule:
        if _args.schedstart is None or _args.schedend is None \
                or _args.schedcloud is None or _args.host is None:
            print('Missing option. All these options are required for --add-schedule:')
            print('    --host')
            print('    --schedule-start')
            print('    --schedule-end')
            print('    --schedule-cloud')
            exit(1)
        data = {'cloud': _args.schedcloud,
                'host': _args.host,
                'start': _args.schedstart,
                'end': _args.schedend}
        print(quads.insert_schedule(data)['result'])
        exit(0)

    elif _args.rmschedule is not None:
        if _args.host:
            data = {"host": _args.host, "index": str(_args.rmschedule)}
            print(quads.remove_schedule(**data))
            exit(0)
        else:
            print('Missing option. Need --host when using --rm-schedule')
            exit(1)

    elif _args.modschedule is not None:
        if _args.host is None:
            print('Missing option. Need --host when using --mod-schedule')
            exit(1)

        if _args.schedstart is None and _args.schedend is None and _args.schedcloud is None:
            print('Missing option. At least one these options are required for --mod-schedule:')
            print('    --schedule-start')
            print('    --schedule-end')
            print('    --schedule-cloud')
            exit(1)

        data = {'index': _args.modschedule,
                'start': _args.schedstart,
                'end': _args.schedend,
                'cloud': _args.schedcloud,
                'host': _args.host}
        print(quads.insert_schedule(data)["result"])
        exit(0)

    elif _args.movehosts:
        if _args.datearg is not None and not _args.dryrun:
            print('--move-hosts and --date are mutually exclusive unless using --dry-run.')
            exit(1)
        url = os.path.join(api_url, 'moves')
        data = {}
        if _args.datearg is not None:
            data['date'] = _args.datearg
        _response = requests.get(url, data)
        js = _response.json()
        if 'result' in js:
            if len(js['result']) == 0:
                print('Nothing to do.')
                exit(0)
            for result in js['result']:
                host = result['host']
                current = result['current']
                new = result['new']
                # now we need to know if we should wipe
                cloud = quads.get_clouds(name=new)
                wipe_value = 1
                if cloud:
                    wipe_value = int(cloud["wipe"])
                print('Moving %s from %s to %s, wipe = %s' % (host, current, new, wipe_value))
                if not _args.dryrun:
                    try:
                        if _args.movecommand == default_move_command:
                            if wipe_value:
                                move_and_rebuild(host, current, new, True)
                            else:
                                move_and_rebuild(host, current, new)
                        else:
                            if wipe_value:
                                subprocess.check_call([args.movecommand, host, current, new])
                            else:
                                subprocess.check_call([args.movecommand, host, current, new, "nowipe"])
                    except Exception as ex:
                        logger.error('Move command failed: %s' % ex)
                        exit(1)

            exit(0)

    elif _args.host:
        _kwargs = {"host": _args.host}
        if _args.datearg:
            _kwargs["date"] = datetime.datetime.strptime(_args.datearg, '%Y-%m-%d %H:%M').isoformat()
        schedules = quads.get_current_schedule(**_kwargs)
        if "result" not in schedules:
            for schedule in schedules:
                cloud = quads.get_clouds(id=schedule["cloud"]["$oid"])
                print(str(cloud['name']))

            exit(0)

    elif _args.cloudonly:
        _kwargs = {"cloud": _args.cloudonly}
        if _args.datearg:
            _kwargs["date"] = datetime.datetime.strptime(_args.datearg, '%Y-%m-%d %H:%M').isoformat()
        schedules = quads.get_current_schedule(**_kwargs)
        if "result" not in schedules:
            for schedule in schedules:
                host = quads.get_hosts(id=schedule["host"]["$oid"])
                print(str(host['name']))

            exit(0)

    elif _args.summary or _args.fullsummary:
        _kwargs = {}
        if _args.datearg:
            _kwargs["date"] = datetime.datetime.strptime(_args.datearg, '%Y-%m-%d %H:%M').isoformat()
        summary = quads.get_summary()
        for cloud in summary:
            if _args.fullsummary or cloud["count"] > 0:
                print("%s: %s (%s)" % (cloud["name"], cloud["count"], cloud["description"]))

        exit(0)

    print('No result received')

    exit(0)


if __name__ == '__main__':
    quads_config_file = os.path.dirname(__file__) + '/../conf/quads.yml'
    quads_config = quads_load_config(quads_config_file)

    if 'data_dir' not in quads_config:
        print('quads: Missing \'data_dir\' in ' + quads_config_file)
        exit(1)

    if 'install_dir' not in quads_config:
        print('quads: Missing \'install_dir\' in ' + quads_config_file)
        exit(1)

    if 'quads_base_url' not in quads_config:
        print('quads: Missing \'quads_base_url\' in ' + quads_config_file)
        exit(1)
    else:
        api_url = os.path.join(quads_config['quads_base_url'], 'api', API)

    sys.path.append(quads_config['install_dir'])
    sys.path.append(os.path.dirname(__file__) + '/../')

    default_config = quads_config['data_dir'] + '/schedule.yaml'
    default_state_dir = quads_config['data_dir'] + '/state'
    default_move_command = '/opt/quads/quads/tools/move_and_rebuild_hosts.py'

    parser = argparse.ArgumentParser(description='Query current cloud for a given host')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--ls-owner', dest='action', action='store_const', const='owner', help='List owners')
    group.add_argument('--ls-cc-users', dest='action', action='store_const', const='ccuser', help='List CC list')
    group.add_argument('--ls-ticket', dest='action', action='store_const', const='ticket', help='List request ticket')
    group.add_argument('--ls-qinq', dest='action', action='store_const', const='qinq', help='List cloud qinq state')
    group.add_argument('--ls-wipe', dest='action', action='store_const', const='wipe', help='List cloud wipe state')
    group.add_argument('--define-host', dest='hostresource', type=str, default=None, help='Define a host resource')
    group.add_argument('--define-cloud', dest='cloudresource', type=str, default=None,
                       help='Define a cloud environment')
    group.add_argument('--add-schedule', dest='addschedule', action='store_true', help='Define a host reservation')
    group.add_argument('--mod-schedule', dest='modschedule', type=str, default=None, help='Modify a host reservation')
    group.add_argument('--add-interface', dest='addinterface', type=str, default=None, help='Define a host interface')
    group.add_argument('--rm-schedule', dest='rmschedule', type=str, default=None, help='Remove a host reservation')
    group.add_argument('--rm-interface', dest='rminterface', type=str, default=None, help='Remove a host interface')
    group.add_argument('--ls-hosts', dest='action', action='store_const', const='host', help='List all hosts')
    group.add_argument('--ls-clouds', dest='action', action='store_const', const='cloud', help='List all clouds')
    group.add_argument('--rm-host', dest='rmhost', type=str, default=None, help='Remove a host')
    group.add_argument('--rm-cloud', dest='rmcloud', type=str, default=None, help='Remove a cloud')
    group.add_argument('--ls-available', dest='action', action='store_const', const='available',
                       help='List available hosts on a specific time frame')
    group.add_argument('--ls-schedule', dest='action', action='store_const', const='schedule',
                       help='List the host reservations')
    group.add_argument('--ls-interface', dest='action', action='store_const', const='interface',
                       help='List the host interfaces')
    parser.add_argument('--host', dest='host', type=str, default=None, help='Specify the host to query')
    parser.add_argument('--cloud-only', dest='cloudonly', type=str, default=None,
                        help='Limit full report to hosts only in this cloud')
    parser.add_argument('-c', '--config', dest='config', help='YAML file with cluster data', default=default_config,
                        type=str)
    parser.add_argument('-d', '--datetime', dest='datearg', type=str, default=None,
                        help='date and time to query; e.g. "2016-06-01 08:00"')

    parser.add_argument('--cloud-owner', dest='cloudowner', type=str, default=None, help='Define environment owner')
    parser.add_argument('--cc-users', dest='ccusers', type=str, default=None, help='Define environment CC list')
    parser.add_argument('--qinq', dest='qinq', type=str, default=None, help='Define environment qinq state')
    parser.add_argument('--wipe', dest='wipe', type=str, default=None, help='Define environment wipe state')
    parser.add_argument('--cloud-ticket', dest='cloudticket', type=str, default=None, help='Define environment ticket')
    parser.add_argument('--description', dest='description', type=str, default=None,
                        help='Defined description of cloud')
    parser.add_argument('--default-cloud', dest='hostcloud', type=str, default=None,
                        help='Defined default cloud for a host')
    parser.add_argument('--force', dest='force', action='store_true',
                        help='Force host or cloud update when already defined')
    parser.add_argument('--summary', dest='summary', action='store_true', help='Generate a summary report')
    parser.add_argument('--full-summary', dest='fullsummary', action='store_true', help='Generate a summary report')
    parser.add_argument('--schedule-query', dest='schedquery', action='store_true',
                        help='Query the schedule for a specific month')
    parser.add_argument('--month', dest='month', type=str, default=datetime.datetime.now().month,
                        help='Query the schedule for a specific month and year')
    parser.add_argument('--year', dest='year', type=str, default=datetime.datetime.now().year,
                        help='Query the schedule for a specific month and year')
    parser.add_argument('--schedule-start', dest='schedstart', type=str, default=None, help='Schedule start date/time')
    parser.add_argument('--schedule-end', dest='schedend', type=str, default=None, help='Schedule end date/time')
    parser.add_argument('--schedule-cloud', dest='schedcloud', type=str, default=None, help='Schedule cloud')
    parser.add_argument('--interface-mac', dest='ifmac', type=str, default=None, help='MAC address for --add-interface')
    parser.add_argument('--interface-ip', dest='ifip', type=str, default=None, help='IP address for --add-interface')
    parser.add_argument('--interface-vlan', dest='ifvlan', type=str, default=None, help='VLAN name for --add-interface')
    parser.add_argument('--interface-port', dest='ifport', type=str, default=None,
                        help='Switch port for --add-interface')
    parser.add_argument('--statedir', dest='statedir', type=str, default=default_state_dir, help='Default state dir')
    parser.add_argument('--move-hosts', dest='movehosts', action='store_true', default=None,
                        help='Move hosts if schedule has changed')
    parser.add_argument('--move-command', dest='movecommand', type=str, default=default_move_command,
                        help='External command to move a host')
    parser.add_argument('--dry-run', dest='dryrun', action='store_true', default=None,
                        help='Dont update state when used with --move-hosts')
    parser.add_argument('--log-path', dest='logpath', type=str, default=None, help='Path to quads log file')
    parser.add_argument('--post-config', dest='postconfig', type=str, default=None, nargs='+', choices=['openstack'],
                        help='Post provisioning configuration to apply')
    parser.add_argument('--version', dest='version', type=str, default=None, help='Version of Software to apply')
    parser.add_argument('--puddle', dest='puddle', type=str, default='latest', help='Puddle to apply')
    parser.add_argument('--os-control-scale', dest='controlscale', type=int, default=None,
                        help='Number of controller nodes for OpenStack deployment')
    parser.add_argument('--os-compute-scale', dest='computescale', type=int, default=None,
                        help='Number of compute nodes for OpenStack deployment')
    parser.add_argument('--host-type', dest='hosttype', type=str, default=None,
                        help='Model/Make/Type of host DellR620  for example')
    parser.add_argument('--vlan', dest='vlan', type=int, default=None,
                        help='VLAN id number for public routable network')
    parser.add_argument('--debug', action='store_true', default=False, help='Show debugging information.')

    args = parser.parse_args()
    main(args)
