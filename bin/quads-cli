#!/bin/python

import urllib
import requests
import json

from datetime import datetime
import calendar
import time
import yaml
import argparse
import os
import sys
import logging
from subprocess import call
from subprocess import check_call

logger = logging.getLogger('quads')
ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

# used to load the configuration for quads behavior
def quads_load_config(quads_config):
    try:
        stream = open(quads_config, 'r')
        try:
            quads_config_yaml = yaml.load(stream)
            stream.close()
        except Exception, ex:
            print "quads: Invalid YAML config: " + quads_config
            exit(1)
    except Exception, ex:
        print ex
        exit(1)
    return(quads_config_yaml)

def main(argv):
    quads_config_file = os.path.dirname(__file__) + "/../conf/quads.yml"
    quads_config = quads_load_config(quads_config_file)

    if "data_dir" not in quads_config:
        print "quads: Missing \"data_dir\" in " + quads_config_file
        exit(1)

    if "install_dir" not in quads_config:
        print "quads: Missing \"install_dir\" in " + quads_config_file
        exit(1)

    if "quads_base_url" not in quads_config:
        print "quads: Missing \"quads_base_url\" in " + quads_config_file
        exit(1)

    sys.path.append(quads_config["install_dir"] + "/lib")
    sys.path.append(os.path.dirname(__file__) + "/../lib")
    from Quads import Quads

    defaultconfig = quads_config["data_dir"] + "/schedule.yaml"
    defaultstatedir = quads_config["data_dir"] + "/state"
    defaultmovecommand = "/bin/echo"

    parser = argparse.ArgumentParser(description='Query current cloud for a given host')
    parser.add_argument('--host', dest='host', type=str, default=None, help='Specify the host to query')
    parser.add_argument('--cloud-only', dest='cloudonly', type=str, default=None, help='Limit full report to hosts only in this cloud')
    parser.add_argument('-c', '--config', dest='config',
                                            help='YAML file with cluster data',
                                            default=defaultconfig, type=str)
    parser.add_argument('-d', '--datetime', dest='datearg', type=str, default=None, help='date and time to query; e.g. "2016-06-01 08:00"')
    parser.add_argument('-i', '--init', dest='initialize', action='store_true', help='initialize the schedule YAML file')
    parser.add_argument('--ls-owner', dest='lsowner', action='store_true', default=None, help='List owners')
    parser.add_argument('--ls-cc-users', dest='lsccusers', action='store_true', default=None, help='List CC list')
    parser.add_argument('--ls-ticket', dest='lsticket', action='store_true', default=None, help='List request ticket')
    parser.add_argument('--ls-qinq', dest='lsqinq', action='store_true', default=None, help='List cloud qinq state')
    parser.add_argument('--cloud-owner', dest='cloudowner', type=str, default=None, help='Define environment owner')
    parser.add_argument('--cc-users', dest='ccusers', type=str, default=None, help='Define environment CC list')
    parser.add_argument('--qinq', dest='qinq', type=str, default=None, help='Define environment qinq state')
    parser.add_argument('--cloud-ticket', dest='cloudticket', type=str, default=None, help='Define environment ticket')
    parser.add_argument('--define-cloud', dest='cloudresource', type=str, default=None, help='Define a cloud environment')
    parser.add_argument('--define-host', dest='hostresource', type=str, default=None, help='Define a host resource')
    parser.add_argument('--description', dest='description', type=str, default=None, help='Defined description of cloud')
    parser.add_argument('--default-cloud', dest='hostcloud', type=str, default=None, help='Defined default cloud for a host')
    parser.add_argument('--force', dest='force', action='store_true', help='Force host or cloud update when already defined')
    parser.add_argument('--summary', dest='summary', action='store_true', help='Generate a summary report')
    parser.add_argument('--full-summary', dest='fullsummary', action='store_true', help='Generate a summary report')
    parser.add_argument('--add-schedule', dest='addschedule', action='store_true', help='Define a host reservation')
    parser.add_argument('--mod-schedule', dest='modschedule', type=int, default=None, help='Modify a host reservation')
    parser.add_argument('--schedule-query', dest='schedquery', action='store_true', help='Query the schedule for a specific month')
    parser.add_argument('--month', dest='month', type=str, default=datetime.now().month, help='Query the schedule for a specific month and year')
    parser.add_argument('--year', dest='year', type=str, default=datetime.now().year, help='Query the schedule for a specific month and year')
    parser.add_argument('--schedule-start', dest='schedstart', type=str, default=None, help='Schedule start date/time')
    parser.add_argument('--schedule-end', dest='schedend', type=str, default=None, help='Schedule end date/time')
    parser.add_argument('--schedule-cloud', dest='schedcloud', type=str, default=None, help='Schedule cloud')
    parser.add_argument('--ls-schedule', dest='lsschedule', action='store_true', help='List the host reservations')
    parser.add_argument('--rm-schedule', dest='rmschedule', type=int, default=None, help='Remove a host reservation')
    parser.add_argument('--ls-hosts', dest='lshosts', action='store_true', default=None, help='List all hosts')
    parser.add_argument('--ls-clouds', dest='lsclouds', action='store_true', default=None, help='List all clouds')
    parser.add_argument('--rm-host', dest='rmhost', type=str, default=None, help='Remove a host')
    parser.add_argument('--rm-cloud', dest='rmcloud', type=str, default=None, help='Remove a cloud')
    parser.add_argument('--statedir', dest='statedir', type=str, default=defaultstatedir, help='Default state dir')
    parser.add_argument('--sync', dest='syncstate', action='store_true', default=None, help='Sync state of hosts')
    parser.add_argument('--move-hosts', dest='movehosts', action='store_true', default=None, help='Move hosts if schedule has changed')
    parser.add_argument('--move-command', dest='movecommand', type=str, default=defaultmovecommand, help='External command to move a host')
    parser.add_argument('--dry-run', dest='dryrun', action='store_true', default=None, help='Dont update state when used with --move-hosts')
    parser.add_argument('--log-path', dest='logpath',type=str,default=None, help='Path to quads log file')

    args = parser.parse_args()

    if args.lshosts:
        url = quads_config["quads_base_url"] + "api/v1/lshosts/"
        response = urllib.urlopen(url)
        data = json.loads(response.read())
        for k in data['hosts']:
            print k
        exit(0)

    if args.lsclouds:
        url = quads_config["quads_base_url"] + "api/v1/lsclouds/"
        response = urllib.urlopen(url)
        data = json.loads(response.read())
        for k in data['clouds']:
            print k
        exit(0)

    if args.lsowner:
        # simple get
        if not args.cloudonly:
            url = quads_config["quads_base_url"] + "api/v1/lsowner/"
            response = urllib.urlopen(url)
            data = json.loads(response.read())
            for k in data['owners']:
                print k
            exit(0)
        else:
            #post
            url = quads_config["quads_base_url"] + "api/v1/lsowner"
            headers = { 'Content-Type': 'application/json' }
            data = { "cloudonly": args.cloudonly }
            r = requests.post(url, data, headers=headers)
            js = r.json()
            if 'owner' in js:
                if len(js['owner']) == 0:
                       print "ERROR"
                       exit(1)
                for owner in js['owner']:
                    print owner
                exit(0)
            if 'owners' in js:
                for k in js['owners']:
                    print k
            exit(0)

    if args.lsccusers:
        # simple get
        if not args.cloudonly:
            url = quads_config["quads_base_url"] + "api/v1/lsccusers/"
            response = urllib.urlopen(url)
            data = json.loads(response.read())
            for k in data['ccusers']:
                print k
            exit(0)
        else:
            #post
            url = quads_config["quads_base_url"] + "api/v1/lsccusers"
            headers = { 'Content-Type': 'application/json' }
            data = { "cloudonly": args.cloudonly }
            r = requests.post(url, data, headers=headers)
            js = r.json()
            if 'ccuser' in js:
                if len(js['ccuser']) == 0:
                       print "ERROR"
                       exit(1)
                for cc in js['ccuser']:
                    print cc
                exit(0)
            if 'ccusers' in js:
                for k in js['ccusers']:
                    print k
            exit(0)

    if args.lsticket:
        # simple get
        if not args.cloudonly:
            url = quads_config["quads_base_url"] + "api/v1/lstickets/"
            response = urllib.urlopen(url)
            data = json.loads(response.read())
            for k in data['tickets']:
                print k
            exit(0)
        else:
            #post
            url = quads_config["quads_base_url"] + "api/v1/lstickets"
            headers = { 'Content-Type': 'application/json' }
            data = { "cloudonly": args.cloudonly }
            r = requests.post(url, data, headers=headers)
            js = r.json()
            if 'ticket' in js:
                if len(js['ticket']) == 0:
                       print "ERROR"
                       exit(1)
                for owner in js['ticket']:
                    print owner
                exit(0)
            if 'tickets' in js:
                for k in js['tickets']:
                    print k
            exit(0)

    if args.lsqinq:
        # simple get
        if not args.cloudonly:
            url = quads_config["quads_base_url"] + "api/v1/lsqinq/"
            response = urllib.urlopen(url)
            data = json.loads(response.read())
            for k in data['qinqs']:
                print k
            exit(0)
        else:
            #post
            url = quads_config["quads_base_url"] + "api/v1/lsqinq"
            headers = { 'Content-Type': 'application/json' }
            data = { "cloudonly": args.cloudonly }
            r = requests.post(url, data, headers=headers)
            js = r.json()
            if 'qinq' in js:
                if len(js['qinq']) == 0:
                       print "ERROR"
                       exit(1)
                for qinq in js['qinq']:
                    print qinq
                exit(0)
            if 'qinqs' in js:
                for k in js['qinqs']:
                    print k
            exit(0)

    if args.hostresource:
        if args.cloudresource:
            print "--define-cloud and --define-host are mutually exclusive."
            exit(1)
        url = quads_config["quads_base_url"] + "api/v1/host"
        headers = { 'Content-Type': 'application/json' }
        data = { "host": args.hostresource, "cloud": args.hostcloud, "force": args.force }
        r = requests.post(url, data, headers=headers)
        js = r.json()
        if 'result' in js:
            if len(js['result']) == 0:
                print "Unexpected error"
                exit(1)
            for result in js['result']:
                print result
            exit(0)
        print "No result received"
        exit(0)

    if args.cloudresource:
        url = quads_config["quads_base_url"] + "api/v1/cloud"
        headers = { 'Content-Type': 'application/json' }
        data = { "cloud": args.cloudresource,
                "description": args.description,
                "owner": args.cloudowner,
                "cc": args.ccusers,
                "qinq": args.qinq,
                "ticket": args.cloudticket,
                "force": args.force }
        r = requests.post(url, data, headers=headers)
        js = r.json()
        if 'result' in js:
            if len(js['result']) == 0:
                print "Unexpected error"
                exit(1)
            for result in js['result']:
                print result
            exit(0)
        print "No result received"
        exit(0)

    if args.addschedule:
        if args.schedstart is None or args.schedend is None or args.schedcloud is None or args.host is None:
            print "Missing option. All these options are required for --add-schedule:"
            print "    --host"
            print "    --schedule-start"
            print "    --schedule-end"
            print "    --schedule-cloud"
        url = quads_config["quads_base_url"] + "api/v1/ahs"
        headers = { 'Content-Type': 'application/json' }
        data = { "cloud": args.schedcloud,
                "host": args.host,
                "start": args.schedstart,
                "end": args.schedend }
        r = requests.post(url, data, headers=headers)
        js = r.json()
        if 'result' in js:
            if len(js['result']) == 0:
                print "Unexpected error"
                exit(1)
            for result in js['result']:
                print result
            exit(0)
        print "No result received"
        exit(0)

    if args.rmschedule is not None:
        url = quads_config["quads_base_url"] + "api/v1/rhs"
        headers = { 'Content-Type': 'application/json' }
        data = { "schedule": args.rmschedule,
                "host": args.host }
        r = requests.post(url, data, headers=headers)
        js = r.json()
        if 'result' in js:
            if len(js['result']) == 0:
                print "Unexpected error"
                exit(1)
            for result in js['result']:
                print result
            exit(0)
        print "No result received"
        exit(0)

    if args.modschedule is not None:
        if args.host is None:
            print "Missing option. Need --host when using --mod-schedule"
            exit(1)

        if args.schedstart is None and args.schedend is None and args.schedcloud is None:
            print "Missing option. At least one these options are required for --mod-schedule:"
            print "    --schedule-start"
            print "    --schedule-end"
            print "    --schedule-cloud"
            exit(1)

        url = quads_config["quads_base_url"] + "api/v1/mhs"
        headers = { 'Content-Type': 'application/json' }
        data = { "schedule": args.modschedule,
                "start": args.schedstart,
                "end": args.schedend,
                "cloud": args.schedcloud,
                "host": args.host }
        r = requests.post(url, data, headers=headers)
        js = r.json()
        if 'result' in js:
            if len(js['result']) == 0:
                print "Unexpected error"
                exit(1)
            for result in js['result']:
                print result
            exit(0)
        print "No result received"
        exit(0)

    if args.movehosts:
        if args.datearg is not None and not args.dryrun:
            print "--move-hosts and --date are mutually exclusive unless using --dry-run."
            exit(1)
        url = quads_config["quads_base_url"] + "api/v1/moves"
        headers = { 'Content-Type': 'application/json' }
        data = {"statedir":args.statedir}
        if args.datearg is not None:
            data["date"] = args.datearg
        r = requests.post(url, data, headers=headers)
        js = r.json()
        if 'result' in js:
            if len(js['result']) == 0:
                print "Nothing to do."
                exit(1)
            for result in js['result']:
                host = result["host"]
                current = result["current"]
                new = result["new"]
                print "Moving " + host + " from " + current + " to " + new
                if not args.dryrun:
                    try:
                        check_call([args.movecommand, host, current, new])
                    except Exception, ex:
                        logger.error("Move command failed: %s" % ex)
                        exit(1)
                    stream = open(args.statedir + "/" + host, 'w')
                    stream.write(new + '\n')
                    stream.close()

            exit(0)
        print "No result received"

        exit(0)

    data = {}
    if args.host:
        data['host'] = args.host

    if args.cloudonly:
        data['cloud'] = args.cloudonly

    if args.datearg:
        data['date'] = args.datearg

    if args.summary:
        data['summary'] = args.summary

    if args.fullsummary:
        data['fullsummary'] = args.fullsummary

    if args.lsschedule:
        data['lsschedule'] = args.lsschedule

    url = quads_config["quads_base_url"] + "api/v1/query"
    headers = { 'Content-Type': 'application/json' }
    r = requests.post(url, data, headers=headers)
    js = r.json()
    if 'result' in js:
        if len(js['result']) == 0:
            exit(0)
        for result in js['result']:
            print result
        exit(0)
    exit(0)

if __name__ == "__main__":
       main(sys.argv[1:])
