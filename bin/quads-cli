#!/usr/bin/env python3
# This file is part of QUADs.
#
# QUADS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# QUADS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with QUADs.  If not, see <http://www.gnu.org/licenses/>.

import logging
import os
import signal
import sys

from quads.cli import parser, QuadsCli, CliException
from quads.config import QConfig
from quads.quads import Quads
from quads.tools.logger import ColorFormatter

logger = logging.getLogger(__name__)

if __name__ == "__main__":
    stdout_stream = logging.StreamHandler(sys.stdout)
    logger.addHandler(stdout_stream)
    logger.propagate = False

    cli_args = vars(parser.parse_args())

    if cli_args.pop("debug", False):
        logger.setLevel(level=logging.DEBUG)
    else:
        logger.setLevel(level=logging.WARN)

    if sys.stdout.isatty():
        stdout_stream.setFormatter(ColorFormatter())
        logger.debug("Attached to terminal, making logs colorful")

    signal.signal(signal.SIGPIPE, signal.SIG_DFL)

    sys.path.append(QConfig.install_dir)
    sys.path.append(os.path.dirname(__file__) + "/../")

    QConfig.read_yaml(QConfig.DEFAULT_CONF_PATH)

    quads = Quads(
        config=QConfig
    )

    qcli = QuadsCli(
        quads=quads,
        logger=logger,
    )

    exit_code = None
    action = cli_args.pop("action")

    try:
        exit_code = qcli.run(
            action=action,
            cli_args=cli_args,
        )
    except CliException as exc:
        # TODO: Differentiate between CLI usage errors and "function" errors
        # each returning different exit status (CLI err >= 127, Functionality error == 2, else == 1)
        logger.error(exc)
        exit(1)
    except Exception as exc:
        logger.exception(exc, exc_info=exc)
        exit(2)

    exit(
        exit_code if exit_code is not None else 0
    )
