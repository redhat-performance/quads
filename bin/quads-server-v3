#!/usr/bin/env python
# encoding: utf-8
from flask import Flask, jsonify, request
from flask_login import login_required
from flask_security import Security, SQLAlchemySessionUserDatastore
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy_utils import database_exists, create_database

from quads.database import db_session, init_db
from quads.models import Base, User, Role, Host, Cloud

db = SQLAlchemy(model_class=Base)
app = Flask(__name__)
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Setup Flask-Security
user_datastore = SQLAlchemySessionUserDatastore(db_session, User, Role)
security = Security(app, user_datastore)


# Create a user to test with
@app.before_first_request
def create_user():
    init_db()
    user_datastore.create_user(email='grafuls@gmail.com', password='password')
    db_session.commit()


@app.route('/hosts/')
def get_hosts():
    _hosts = db.session.query(Host).all()
    return jsonify([_host.as_dict() for _host in _hosts])


@app.route('/hosts/<hostname>/')
@login_required
def get_host(hostname):
    _host = db.session.query(Host).filter(Host.name == hostname).first()
    return jsonify(_host.as_dict())


@app.route('/clouds/')
def get_clouds():
    _clouds = db.session.query(Cloud).all()
    return jsonify([_cloud.as_dict() for _cloud in _clouds])


@app.route('/clouds/<cloud>/')
def get_cloud(cloud):
    _cloud = db.session.query(Cloud).filter(Cloud.name == cloud).first()
    return jsonify(_cloud.as_dict())


@app.route('/hosts/', methods=['POST'])
def create_host():
    data = request.get_json()
    cloud_name = data.get("cloud")
    hostname = data.get("name")
    default_cloud = data.get("default_cloud")
    host_type = data.get("host_type")

    if not hostname:
        return jsonify({
            'error': 'Bad Request',
            'message': 'Missing argument: name'
        }), 400

    _host = db.session.query(Host).filter(Host.name == hostname).first()
    if _host:
        return jsonify({
            'error': 'Bad Request',
            'message': f'Host {hostname} already exists'
        }), 400

    if not host_type:
        return jsonify({
            'error': 'Bad Request',
            'message': 'Missing argument: host_type'
        }), 400

    if default_cloud:
        _default_cloud = db.session.query(Cloud).filter(Cloud.name == default_cloud).first()
        if not _default_cloud:
            return jsonify({
                'error': 'Bad Request',
                'message': f'Default Cloud not found: {default_cloud}'
            }), 400
    else:
        return jsonify({
            'error': 'Bad Request',
            'message': 'Missing argument: default_cloud'
        }), 400

    _cloud = _default_cloud

    if cloud_name:
        _cloud = db.session.query(Cloud).filter(Cloud.name == cloud_name).first()
        if not _cloud:
            return jsonify({
                'error': 'Bad Request',
                'message': f'Cloud not found: {cloud_name}'
            }), 400

    _host_obj = Host(name=hostname, host_type=host_type, cloud=_cloud, default_cloud=_default_cloud)
    db.session.add(_host_obj)
    db.session.commit()
    return jsonify(_host_obj.as_dict()), 201


@app.route('/clouds/', methods=['POST'])
def create_cloud():
    data = request.get_json()
    cloud_name = data.get("name")

    if not cloud_name:
        return jsonify({
            'error': 'Bad Request',
            'message': 'Missing argument: name'
        }), 400

    _cloud = db.session.query(Cloud).filter(Cloud.name == cloud_name).first()
    if _cloud:
        return jsonify({
            'error': 'Bad Request',
            'message': f'Cloud {cloud_name} already exists'
        }), 400

    _cloud_obj = Cloud(name=cloud_name)
    db.session.add(_cloud_obj)
    db.session.commit()
    return jsonify(_cloud_obj.as_dict()), 201


@app.route('/hosts/', methods=['PUT'])
def update_host():
    data = request.get_json()
    cloud_name = data.get("cloud")
    hostname = data.get("name")
    default_cloud = data.get("default_cloud")
    host_type = data.get("host_type")

    if not hostname:
        return jsonify({
            'error': 'Bad Request',
            'message': 'Missing argument: name'
        }), 400

    _host = db.session.query(Host).filter(Host.name == hostname).first()
    if not _host:
        return jsonify({
            'error': 'Bad Request',
            'message': f'Host {hostname} not found'
        }), 400

    if default_cloud:
        _default_cloud = db.session.query(Cloud).filter(Cloud.name == default_cloud).first()
        if not _default_cloud:
            return jsonify({
                'error': 'Bad Request',
                'message': f'Default Cloud not found: {default_cloud}'
            }), 400
        else:
            _host.default_cloud = _default_cloud
    else:
        return jsonify({
            'error': 'Bad Request',
            'message': 'Missing argument: default_cloud'
        }), 400

    if cloud_name:
        _cloud = db.session.query(Cloud).filter(Cloud.name == cloud_name).first()
        if not _cloud:
            return jsonify({
                'error': 'Bad Request',
                'message': f'Cloud not found: {cloud_name}'
            }), 400
        else:
            _host.cloud = _cloud

    if host_type:
        _host.host_type = host_type

    db.session.commit()

    return jsonify(_host.as_dict()), 200


app.run()
