openapi: 3.0.0
info:
  version: '3.0.0'
  title: 'QUADS'
  description: |-
    QUADS automates the future scheduling, end-to-end provisioning and delivery of bare-metal servers and networks.
    
    This is it's REST API implementation.
    
    Some useful links:
    - [Quads repository](https://github.com/redhat-performance/quads)
    - [Quads blog](https://quads.dev)
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.html
servers:
  - url: 'https://quads.example.com/api/v3/'

tags:
  - name: Auth
    description: Everything about authentication
#    externalDocs:
#      description: Find out more
#      url: http://swagger.io
  - name: Clouds
    description: Operations about clouds
  - name: Assignments
    description: Operations about assignments
  - name: Hosts
    description: Operations about hosts
  - name: Interfaces
    description: Operations about interfaces
  - name: Disks
    description: Operations about disks
  - name: Memory
    description: Operations about memory
  - name: Processors
    description: Operations about processors
  - name: Vlans
    description: Operations about vlans
  - name: Schedules
    description: Operations about schedules
  - name: Available
    description: Operations about hosts availability
  - name: Moves
    description: Operations about hosts transitions
  - name: Other
    description: Other operations

paths:

  /login/:
    post:
      summary: Login endpoint with Basic Auth that returns token for Bearer Auth
      tags:
        - Auth
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful user login
          content:
            application/json:
              schema:
                properties:
                  auth_token:
                    description: Authentication Token
                    type: string
                    example: 7h1515aV3rYkr1p71k70k3n
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout/:
    post:
      summary: Logout endpoint for blacklisting authentication token
      tags:
        - Auth
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful user logout
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /register/:
    post:
      summary: Register new users
      tags:
        - Auth
      requestBody:
        description: Body request with *user* details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: quads@redhat.com
                password:
                  type: string
                  example: 7h1515aV3rYkr1p71k70k3n
      responses:
        '200':
          description: New user authentication token
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Successful login
                  auth_token:
                    description: Authentication Token
                    type: string
                    example: 7h1515aV3rYkr1p71k70k3n
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /clouds/:
    get:
      summary: Returns a list with all the defined clouds
      tags:
        - Clouds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Cloud'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new cloud
      tags:
        - Clouds
      requestBody:
        description: Body request with *cloud* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cloud'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
      security:
        - BearerAuth: [ ]

  /clouds/{cloudName}/:
    delete:
      summary: Delete cloud by cloud name
      tags:
        - Clouds
      parameters:
        - name: cloudName
          in: path
          description: Cloud name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted Cloud
      security:
        - BearerAuth: [ ]

  /clouds/free/:
    get:
      summary: Returns all free clouds that are available for new assignments
      tags:
        - Clouds
      responses:
        '200':
          description: Free clouds
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cloud'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /clouds/summary/:
    get:
      summary: Returns all clouds summary
      tags:
        - Clouds
      responses:
        '200':
          description: Cloud summary
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudSummary'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /hosts/:
    get:
      summary: Returns a list with all the defined hosts
      tags:
        - Hosts
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter hosts by name.
        - in: query
          name: model
          schema:
            type: string
          description: Filter hosts by model name.
        - in: query
          name: host_type
          schema:
            type: string
          description: Filter hosts by type.
        - in: query
          name: build
          schema:
            type: boolean
          description: Filter by build status.
        - in: query
          name: validated
          schema:
            type: boolean
          description: Filter by validated status.
        - in: query
          name: switch_config_applied
          schema:
            type: boolean
          description: Filter by switch config applied status.
        - in: query
          name: broken
          schema:
            type: boolean
          description: Filter by broken status.
        - in: query
          name: retired
          schema:
            type: boolean
          description: Filter by retired status.
        - in: query
          name: last_build
          schema:
            type: string
          description: Filter by last build date.
        - in: query
          name: created_on
          schema:
            type: string
          description: Filter by created on date.
      responses:
        '200':
          description: Host name
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new host
      tags:
        - Hosts
      requestBody:
        description: Body request with *host* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Host'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Created
      security:
        - BearerAuth: [ ]

  /hosts/{hostName}/:
    get:
      summary: Returns a host by name
      tags:
        - Hosts
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Host name
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      summary: Update an existing host
      tags:
        - Hosts
      requestBody:
        description: Body request with *host* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostClean'
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Host name
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete host by host name
      tags:
        - Hosts
      parameters:
        - name: hostName
          in: path
          description: Hostname
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted Host
      security:
        - BearerAuth: [ ]

  /hosts/{hostName}/memory/:
    get:
      summary: Returns a host memory by host name
      tags:
        - Hosts
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Memory
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Memory'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /hosts/{hostName}/processors/:
    get:
      summary: Returns a host processors by host name
      tags:
        - Hosts
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Processors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Processor'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /hosts/{hostName}/disks/:
    get:
      summary: Returns a host disks by host name
      tags:
        - Hosts
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Disks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Disk'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /hosts/{hostName}/interfaces/:
    get:
      summary: Returns a host interfaces by host name
      tags:
        - Hosts
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Interfaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Interface'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /disks/:
    get:
      summary: Returns all disks
      tags:
        - Disks
      responses:
        '200':
          description: Disks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Disk'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /disks/{disk_id}/:
    get:
      summary: Returns a specific disk by disc id
      tags:
        - Disks
      parameters:
        - name: disk_id
          in: path
          description: Disk ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Disks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Disk'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete disk on host by disk id
      tags:
        - Disks
      parameters:
        - name: disk_id
          in: path
          description: Disk ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted Disk
      security:
        - BearerAuth: [ ]

  /disks/{hostName}/:
    post:
      summary: Create a host disk definition
      tags:
        - Disks
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *disk* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Disk'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Disk details
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Disk'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    patch:
      summary: Update an existing host disks definitions
      tags:
        - Disks
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *disk* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Disk'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Disk details
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Disk'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

  /interfaces/:
    get:
      summary: Returns a list of all interfaces
      tags:
        - Interfaces
      responses:
        '200':
          description: Interface details list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Interface'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /interfaces/{interface_id}/:
    get:
      summary: Returns a specific interface for a specific interface id
      tags:
        - Interfaces
      parameters:
        - name: interface_id
          in: path
          description: Interface ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Interface details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /interfaces/{hostName}/:
    post:
      summary: Create a host interface definition
      tags:
        - Interfaces
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *interface* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interface'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Interface details list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    patch:
      summary: Update an existing host interface definitions
      tags:
        - Interfaces
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *interface* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interface'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Interface details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

  /interfaces/{hostName}/{ifName}/:

    delete:
      summary: Delete interface on host by interface id
      tags:
        - Interfaces
      parameters:
        - name: hostName
          in: path
          description: Hostname
          required: true
          schema:
            type: string
        - name: ifName
          in: path
          description: Interface name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted Disk
      security:
        - BearerAuth: [ ]

  /memory/:
    get:
      summary: Returns a list of all memory
      tags:
        - Memory
      responses:
        '200':
          description: Memory details list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Memory'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /memory/{memory_id}/:
    get:
      summary: Returns a specific memory for a specific memory id
      tags:
        - Memory
      responses:
        '200':
          description: Memory details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memory'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete memory on host by memory id
      tags:
        - Memory
      parameters:
        - name: memory_id
          in: path
          description: Memory ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted Memory
      security:
        - BearerAuth: [ ]

  /memory/{hostName}/:
    post:
      summary: Create a host memory definition
      tags:
        - Memory
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *memory* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Memory'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Memory details list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memory'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    patch:
      summary: Update an existing host memory definitions
      tags:
        - Memory
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *memory* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Memory'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Memory details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memory'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

  /processors/:
    get:
      summary: Returns a list of all processors
      tags:
        - Processors
      responses:
        '200':
          description: Processor details list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Processor'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /processors/{processor_id}/:
    get:
      summary: Returns a specific processor for a specific processor id
      tags:
        - Processors
      parameters:
        - name: processor_id
          in: path
          description: Processor ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Processor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Processor'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete processor on host by processor id
      tags:
        - Processors
      parameters:
        - name: processor_id
          in: path
          description: Processor ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted Processor
      security:
        - BearerAuth: [ ]

  /processors/{hostName}/:
    post:
      summary: Create a host processors definition
      tags:
        - Processors
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *processor* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Processor'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Processor details list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Processor'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

  /vlans/:
    get:
      summary: Returns a list with all the defined vlans
      tags:
        - Vlans
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vlan'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new vlan
      tags:
        - Vlans
      requestBody:
        description: Body request with *vlan* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vlan'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
      security:
        - BearerAuth: [ ]

  /vlans/{vlan_id}/:
    get:
      summary: Returns a detail of a specific vlan by id
      tags:
        - Vlans
      parameters:
        - name: vlan_id
          in: path
          description: Vlan ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Vlan details list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vlan'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete vlan by vlan id
      tags:
        - Vlans
      parameters:
        - name: vlan_id
          in: path
          description: Vlan ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted Vlan
      security:
        - BearerAuth: [ ]

  /schedules/:
    get:
      summary: Returns a list with all the defined schedules
      tags:
        - Schedules
      responses:
        '200':
          description: Schedule
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new schedule
      tags:
        - Schedules
      requestBody:
        description: Body request with *schedule* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Created
      security:
        - BearerAuth: [ ]

  /schedules/{schedule_id}/:
    get:
      summary: Returns a schedule by id
      tags:
        - Schedules
      parameters:
        - name: schedule_id
          in: path
          description: Schedule ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update an existing schedule
      tags:
        - Schedules
      parameters:
        - name: schedule_id
          in: path
          description: Schedule ID
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *schedule* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Schedule
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete schedule by id
      tags:
        - Schedules
      parameters:
        - name: schedule_id
          in: path
          description: Schedule ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted Schedule
      security:
        - BearerAuth: [ ]

  /schedules/current/:
    get:
      summary: Returns all current schedules
      tags:
        - Schedules
      parameters:
        - name: date
          in: query
          description: Date for current
          required: false
          schema:
            type: string
        - name: host
          in: query
          description: Hostname to filter by
          required: false
          schema:
            type: string
        - name: cloud
          in: query
          description: Cloud name to filter by
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Schedule
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schedules/future/:
    get:
      summary: Returns all future schedules
      tags:
        - Schedules
      parameters:
        - name: host
          in: query
          description: Hostname to filter by
          required: false
          schema:
            type: string
        - name: cloud
          in: query
          description: Cloud name to filter by
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Schedule
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assignments/active/:
    get:
      summary: Returns a list with all active assignments
      tags:
        - Assignments
      responses:
        '200':
          description: Assignment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assignments/active/{cloud_name}/:
    get:
      summary: Returns a list with all active assignments for a specific cloud
      tags:
        - Assignments
      parameters:
        - name: cloud_name
          in: path
          description: Cloud name to filter by
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Assignment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assignments/:
    get:
      summary: Returns a list with all the defined assignments
      tags:
        - Assignments
      responses:
        '200':
          description: Assignment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new assignment
      tags:
        - Assignments
      requestBody:
        description: Body request with *assignment* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
          text/plain:
            schema:
              type: string
      security:
        - BearerAuth: [ ]
      responses:
        '201':
          description: Created

  /assignments/{assignment_id}/:
    get:
      summary: Returns an assignment by id
      tags:
        - Assignments
      parameters:
        - name: assignment_id
          in: path
          description: Assignment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Assignment
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update an existing assignment
      tags:
        - Assignments
      parameters:
        - name: assignment_id
          in: path
          description: Assignment ID
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *assignment* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
          text/plain:
            schema:
              type: string
      security:
        - BearerAuth: [ ]
      responses:
        '201':
          description: Created
    delete:
      summary: Delete assignment by id
      tags:
        - Assignments
      parameters:
        - name: assignment_id
          in: path
          description: Assignment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted assignment
      security:
        - BearerAuth: [ ]

  /notifications/:
    get:
        summary: Returns a list with all the defined notifications
        tags:
            - Notifications
        responses:
          '200':
            description: Notification
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Notification'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Error'

  /notifications/{notification_id}/:
    get:
      summary: Returns a notification by id
      tags:
          - Notifications
      parameters:
        - name: notification_id
          in: path
          description: Notification ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
    patch:
        summary: Update an existing notification
        tags:
            - Notifications
        parameters:
          - name: notification_id
            in: path
            description: Notification ID
            required: true
            schema:
              type: string
        requestBody:
            description: Body request with *notification* details
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Notification'
        responses:
          '201':
            description: Created
        security:
            - BearerAuth: [ ]

  /available/:
    get:
      summary: Returns a list of available hosts
      tags:
        - Available
      parameters:
        - name: start
          in: query
          description: Start date
          required: false
          schema:
            type: string
        - name: end
          in: query
          description: End date
          required: false
          schema:
            type: string
        - name: cloud
          in: query
          description: Cloud
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Hosts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Host'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /available/{hostname}/:
    get:
      summary: Returns a boolean for weather the host is available or not
      tags:
        - Available
      parameters:
        - name: hostname
          in: path
          description: Hostname
          required: true
          schema:
            type: string
        - name: start
          in: query
          description: Start date
          required: false
          schema:
            type: string
        - name: end
          in: query
          description: End date
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Hosts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Host'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /moves/:
    get:
      summary: Returns a list of hosts that are transitioning with the source and target clouds
      tags:
        - Moves
      parameters:
        - name: date
          in: query
          description: Date
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Moves
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Move'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /version/:
    get:
      summary: Returns Quads version
      tags:
        - Other
      responses:
        '200':
          description: Version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Cloud:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: cloud12
        last_redefined:
          type: string
          example: 1984-02-02
    CloudSummary:
      type: object
      properties:
        name:
          type: string
          example: cloud12
        count:
          type: integer
          example: 10
        description:
          type: string
          example: Short description here
        owner:
          type: string
          example: jsbach
        ticket:
          type: string
          example: 2122
        ccuser:
          type: array
          items:
            type: string
          example: [edroste, kgodel]
        provisioned:
          type: boolean
          example: true
        validated:
          type: boolean
          example: true
    Disk:
      type: object
      properties:
        disk_id:
          type: integer
          example: 1
        disk_type:
          type: string
          example: nvme
        size_gb:
          type: integer
          example: 2000
        count:
          type: integer
          example: 10
        host_id:
          type: integer
          example: 10
    Memory:
      type: object
      required:
        - size_gb
        - handle
        - host_id
      properties:
        id:
          type: integer
          example: 12
        size_gb:
          type: integer
          example: 2000
        handle:
          type: string
          example: MMD
        host_id:
          type: integer
          example: 10
    Processor:
      type: object
      properties:
        id:
          type: integer
          example: 12
        handle:
          type: string
          example: CoreI7
        vendor:
          type: string
          example: Intel
        product:
          type: string
          example: i7
        cores:
          type: integer
          example: 20
        threads:
          type: integer
          example: 20
        host_id:
          type: integer
          example: 10
    Interface:
      type: object
      properties:
        id:
          type: integer
          example: 12
        name:
          type: string
          example: em1
        bios_id:
          type: string
          example: nic1
        mac_address:
          type: string
          example: aa:00:bb:11:cc:22
        switch_ip:
          type: string
          example: 10.1.1.18
        switch_port:
          type: string
          example: xt-0-0/1
        speed:
          type: integer
          example: 1000
        vendor:
          type: string
          example: Intel
        pxe_boot:
          type: boolean
          example: true
        maintenance:
          type: boolean
          example: false
        host_id:
          type: integer
          example: 10
    HostClean:
      type: object
      properties:
        name:
          type: string
          example: host.example.com
        model:
          type: string
          example: r640
        host_type:
          type: string
          example: vendor
        build:
          type: boolean
          example: true
        validated:
          type: boolean
          example: true
        switch_config_applied:
          type: boolean
          example: true
        broken:
          type: boolean
          example: true
        retired:
          type: boolean
          example: true
        last_build:
          type: string
          example: 2022-02-02
        cloud_id:
          type: integer
          example: 12
        default_cloud_id:
          type: integer
          example: 1
    Host:
      type: object
      properties:
        id:
          type: integer
          example: 12
        name:
          type: string
          example: host.example.com
        model:
          type: string
          example: r640
        host_type:
          type: string
          example: vendor
        build:
          type: boolean
          example: true
        validated:
          type: boolean
          example: true
        switch_config_applied:
          type: boolean
          example: true
        broken:
          type: boolean
          example: true
        retired:
          type: boolean
          example: true
        last_build:
          type: string
          example: 2022-02-02
        cloud_id:
          type: integer
          example: 12
        default_cloud_id:
          type: integer
          example: 1
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/Interface'
        disks:
          type: array
          items:
            $ref: '#/components/schemas/Disk'
        memory:
          type: array
          items:
            $ref: '#/components/schemas/Memory'
        processors:
          type: array
          items:
            $ref: '#/components/schemas/Processor'
    Assignment:
      type: object
      properties:
        active:
          type: boolean
          example: true
        provisioned:
          type: boolean
          example: true
        validated:
          type: boolean
          example: true
        description:
          type: string
          example: Short description here
        owner:
          type: string
          example: jsbach
        ticket:
          type: string
          example: 2122
        qinq:
          type: integer
          example: 1
        wipe:
          type: boolean
          example: true
        ccuser:
          type: array
          items:
            type: string
          example: [edroste, kgodel]
        cloud_id:
          type: integer
          example: 12
        vlan_id:
          type: integer
          example: 12

    Schedule:
      type: object
      properties:
        start:
          type: string
          example: 2022-02-02T22:00
        end:
          type: string
          example: 2022-04-02T22:00
        build_start:
          type: string
          example: 2022-02-02T22:00
        build_end:
          type: string
          example: 2022-04-02T22:00
        assignment_id:
          type: integer
          example: 12
        host_id:
          type: integer
          example: 1

    Move:
      type: object
      properties:
        host:
          type: string
          example: host.example.com
        new:
          type: string
          example: cloud09
        current:
          type: string
          example: cloud01

    Version:
      type: object
      properties:
        result:
          type: string
          example: Quads version 2.0 Max

    Notification:
      type: object
      properties:
        fail:
          type: boolean
          example: false
        success:
          type: boolean
          example: false
        initial:
          type: boolean
          example: false
        pre_initial:
          type: boolean
          example: false
        pre:
          type: boolean
          example: false
        one_day:
          type: boolean
          example: false
        three_days:
          type: boolean
          example: false
        five_days:
          type: boolean
          example: false
        seven_days:
          type: boolean
          example: false
        assignment:
          type: integer
          example: 12
    Vlan:
      type: object
      properties:
        gateway:
          type: string
          example: 10.1.18.8
        ip_free:
          type: integer
          example: 256
        ip_range:
          type: string
        netmask:
          type: string
          example: 255.255.255.255
        vlan_id:
          type: integer
          example: 601
    Role:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          example: 12
        name:
          type: string
          example: admin
        description:
          type: string
          example: All access granted
    User:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: quads@example.com
        active:
          type: boolean
          example: true
        confirmed_at:
          type: string
          example: 1984-02-02T22:00
        auth_token:
          type: string
          example: 1984-02-02T22:00
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 400
          format: int32
        message:
          type: string
          example: Something went horribly wrong.
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
