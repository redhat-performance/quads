openapi: 3.0.0
info:
  version: '3.0.0'
  title: 'QUADS'
  description: 'QUADS automates the future scheduling, end-to-end provisioning and delivery of bare-metal servers and networks.'
  license:
    name: GPLv3
servers:
  - url: 'https://quads.example.com/api/v3/'
paths:
  /clouds/:
    get:
      summary: 'Returns a list with all the defined clouds'
      tags:
        - clouds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Cloud'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new cloud
      tags:
        - clouds
      requestBody:
        description: Body request with *cloud* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cloud'
          application/xml:
            schema:
              $ref: '#/components/schemas/Cloud'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
      security:
        - BearerAuth: [ ]

  /clouds/{cloudName}:
    get:
      summary: 'Returns a cloud by name'
      tags:
        - clouds
      parameters:
        - name: cloudName
          in: path
          description: Cloud name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Cloud name'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cloud'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete cloud by cloud name
      tags:
        - clouds
      parameters:
        - name: cloudName
          in: path
          description: Cloud name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Deleted Cloud'
      security:
        - BearerAuth: [ ]

  /hosts/:
    get:
      summary: 'Returns a list with all the defined hosts'
      tags:
        - hosts
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter hosts by name.
        - in: query
          name: model
          schema:
            type: string
          description: Filter hosts by model name.
        - in: query
          name: host_type
          schema:
            type: string
          description: Filter hosts by type.
        - in: query
          name: build
          schema:
            type: boolean
          description: Filter by build status.
        - in: query
          name: validated
          schema:
            type: boolean
          description: Filter by validated status.
        - in: query
          name: switch_config_applied
          schema:
            type: boolean
          description: Filter by switch config applied status.
        - in: query
          name: broken
          schema:
            type: boolean
          description: Filter by broken status.
        - in: query
          name: retired
          schema:
            type: boolean
          description: Filter by retired status.
        - in: query
          name: last_build
          schema:
            type: string
          description: Filter by last build date.
        - in: query
          name: created_on
          schema:
            type: string
          description: Filter by created on date.
      responses:
        '200':
          description: 'Host name'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new host
      tags:
        - hosts
      requestBody:
        description: Body request with *host* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Host'
          application/xml:
            schema:
              $ref: '#/components/schemas/Host'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Created
      security:
        - BearerAuth: [ ]

  /hosts/{hostName}:
    get:
      summary: 'Returns a host by name'
      tags:
        - hosts
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Host name'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      summary: 'Update an existing host'
      tags:
        - hosts
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Host name'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete host by host name
      tags:
        - hosts
      parameters:
        - name: hostName
          in: path
          description: Hostname
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Deleted Host'
      security:
        - BearerAuth: [ ]

  /disks/{hostName}:
    get:
      summary: 'Returns a list of disk for a specific hostname'
      tags:
        - disks
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Disks'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Disk'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: 'Create a host disk definition'
      tags:
        - disks
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *disk* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Disk'
          application/xml:
            schema:
              $ref: '#/components/schemas/Disk'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: 'Disk details'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Disk'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    patch:
      summary: 'Update an existing host disks definitions'
      tags:
        - disks
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *disk* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Disk'
          application/xml:
            schema:
              $ref: '#/components/schemas/Disk'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: 'Disk details'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Disk'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete disk on host by disk id
      tags:
        - disks
      parameters:
        - name: hostName
          in: path
          description: Hostname
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *disk* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Disk'
          application/xml:
            schema:
              $ref: '#/components/schemas/Disk'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: 'Deleted Disk'
      security:
        - BearerAuth: [ ]

  /interfaces/{hostName}:
    get:
      summary: 'Returns a list of interfaces for a specific hostname'
      tags:
        - interfaces
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Interface details list'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Interface'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: 'Create a host interface definition'
      tags:
        - interfaces
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *interface* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interface'
          application/xml:
            schema:
              $ref: '#/components/schemas/Interface'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: 'Interface details list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    patch:
      summary: 'Update an existing host interface definitions'
      tags:
        - interfaces
      parameters:
        - name: hostName
          in: path
          description: Host name
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *interface* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interface'
          application/xml:
            schema:
              $ref: '#/components/schemas/Interface'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: 'Interface details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete interface on host by interface id
      tags:
        - disks
      parameters:
        - name: hostName
          in: path
          description: Hostname
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *interface* id
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interface'
          application/xml:
            schema:
              $ref: '#/components/schemas/Interface'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: 'Deleted Disk'
      security:
        - BearerAuth: [ ]

  /schedules/:
    get:
      summary: 'Returns a list with all the defined schedules'
      tags:
        - schedules
      responses:
        '200':
          description: 'Schedule'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new schedule
      tags:
        - schedules
      requestBody:
        description: Body request with *schedule* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
          application/xml:
            schema:
              $ref: '#/components/schemas/Schedule'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Created
      security:
        - BearerAuth: [ ]

  /schedules/{schedule_id}:
    get:
      summary: 'Returns a schedule by id'
      tags:
        - schedules
      parameters:
        - name: schedule_id
          in: path
          description: Schedule ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Schedule'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: 'Update an existing schedule'
      tags:
        - schedules
      parameters:
        - name: schedule_id
          in: path
          description: Schedule ID
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *schedule* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
          application/xml:
            schema:
              $ref: '#/components/schemas/Schedule'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: 'Schedule'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete schedule by id
      tags:
        - schedules
      parameters:
        - name: schedule_id
          in: path
          description: Schedule ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Deleted Schedule'
      security:
        - BearerAuth: [ ]

  /schedules/current:
    get:
      summary: 'Returns all current schedules'
      tags:
        - schedules
      parameters:
        - name: date
          in: query
          description: Date for current
          required: false
          schema:
            type: string
        - name: host
          in: query
          description: Hostname to filter by
          required: false
          schema:
            type: string
        - name: cloud
          in: query
          description: Cloud name to filter by
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Schedule'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schedules/future:
    get:
      summary: 'Returns all future schedules'
      tags:
        - schedules
      parameters:
        - name: host
          in: query
          description: Hostname to filter by
          required: false
          schema:
            type: string
        - name: cloud
          in: query
          description: Cloud name to filter by
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Schedule'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assignments/active:
    get:
      summary: 'Returns a list with all active assignments'
      tags:
        - assignments
      responses:
        '200':
          description: 'Assignment'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assignments/active/{cloud_name}:
    get:
      summary: 'Returns a list with all active assignments for a specific cloud'
      tags:
        - assignments
      parameters:
        - name: cloud_name
          in: path
          description: Cloud name to filter by
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Assignment'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /assignments/:
    get:
      summary: 'Returns a list with all the defined assignments'
      tags:
        - assignments
      responses:
        '200':
          description: 'Assignment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new assignment
      tags:
        - assignments
      requestBody:
        description: Body request with *assignment* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
          application/xml:
            schema:
              $ref: '#/components/schemas/Assignment'
          text/plain:
            schema:
              type: string
      security:
        - BearerAuth: [ ]
      responses:
        '201':
          description: Created
    patch:
      summary: Add a new assignment
      tags:
        - assignments
      parameters:
        - name: schedule_id
          in: path
          description: Schedule ID
          required: true
          schema:
            type: string
      requestBody:
        description: Body request with *assignment* details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
          application/xml:
            schema:
              $ref: '#/components/schemas/Assignment'
          text/plain:
            schema:
              type: string
      security:
        - BearerAuth: [ ]
      responses:
        '201':
          description: Created

  /assignments/{assignment_id}:
    get:
      summary: 'Returns an assignment by id'
      tags:
        - assignments
      parameters:
        - name: assignment_id
          in: path
          description: Assignment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Assignment'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete assignment by id
      tags:
        - assignments
      parameters:
        - name: assignment_id
          in: path
          description: Assignment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Deleted assignment'
      security:
        - BearerAuth: [ ]

  /available:
    get:
      summary: 'Returns a list of available hosts'
      tags:
        - available
      parameters:
        - name: start
          in: query
          description: Start date
          required: false
          schema:
            type: string
        - name: end
          in: query
          description: End date
          required: false
          schema:
            type: string
        - name: cloud
          in: query
          description: Cloud
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Hosts'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Host'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /available/{hostname}:
    get:
      summary: 'Returns a boolean for weather the host is available or not'
      tags:
        - available
      parameters:
        - name: hostname
          in: path
          description: Hostname
          required: true
          schema:
            type: string
        - name: start
          in: query
          description: Start date
          required: false
          schema:
            type: string
        - name: end
          in: query
          description: End date
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Hosts'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Host'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login/:
    post:
      summary: Login endpoint with Basic Auth that returns token for Bearer Auth
      tags:
        - auth
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful user login
          content:
            application/json:
              schema:
                properties:
                  auth_token:
                    description: Authentication Token
                    type: string
                    example: 7h1515aV3rYkr1p71k70k3n
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout/:
    post:
      summary: Logout endpoint for blacklisting authentication token
      tags:
        - auth
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successful user logout
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /register/:
    post:
      summary: Register new users
      tags:
        - auth
      requestBody:
        description: Body request with *user* details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: quads@redhat.com
                password:
                  type: string
                  example: 7h1515aV3rYkr1p71k70k3n
      responses:
        '200':
          description: New user authentication token
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Successful login
                  auth_token:
                    description: Authentication Token
                    type: string
                    example: 7h1515aV3rYkr1p71k70k3n
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Cloud:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: cloud12
#        last_redefined:
#          type: string
#          example: 1984-02-02
    Disk:
      type: object
      properties:
        disk_id:
          type: integer
          example: 1
        disk_type:
          type: string
          example: nvme
        size_gb:
          type: integer
          example: 2000
        count:
          type: integer
          example: 10
        host_id:
          type: integer
          example: 10
    Memory:
      type: object
      required:
        - size_gb
        - handle
        - host_id
      properties:
        id:
          type: integer
          example: 12
        size_gb:
          type: integer
          example: 2000
        handle:
          type: string
          example: MMD
        host_id:
          type: integer
          example: 10
    Processor:
      type: object
      properties:
        id:
          type: integer
          example: 12
        handle:
          type: string
          example: CoreI7
        vendor:
          type: string
          example: Intel
        product:
          type: string
          example: i7
        cores:
          type: integer
          example: 20
        threads:
          type: integer
          example: 20
        host_id:
          type: integer
          example: 10
    Interface:
      type: object
      properties:
        id:
          type: integer
          example: 12
        name:
          type: string
          example: em1
        bios_id:
          type: string
          example: nic1
        mac_address:
          type: string
          example: aa:00:bb:11:cc:22
        switch_ip:
          type: string
          example: 10.1.1.18
        switch_port:
          type: string
          example: xt-0-0/1
        speed:
          type: integer
          example: 1000
        vendor:
          type: string
          example: Intel
        pxe_boot:
          type: boolean
          example: true
        maintenance:
          type: boolean
          example: false
        host_id:
          type: integer
          example: 10
    Host:
      type: object
      properties:
        id:
          type: integer
          example: 12
        name:
          type: string
          example: host.example.com
        model:
          type: string
          example: r640
        host_type:
          type: string
          example: vendor
        build:
          type: boolean
          example: true
        validated:
          type: boolean
          example: true
        switch_config_applied:
          type: boolean
          example: true
        broken:
          type: boolean
          example: true
        retired:
          type: boolean
          example: true
        last_build:
          type: string
          example: 2022-02-02
        cloud_id:
          type: integer
          example: 12
        default_cloud_id:
          type: integer
          example: 1
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/Interface'
        disks:
          type: array
          items:
            $ref: '#/components/schemas/Disk'
        memory:
          type: array
          items:
            $ref: '#/components/schemas/Memory'
        processors:
          type: array
          items:
            $ref: '#/components/schemas/Processor'
    Assignment:
      type: object
      properties:
        active:
          type: boolean
          example: true
        provisioned:
          type: boolean
          example: true
        validated:
          type: boolean
          example: true
        description:
          type: string
          example: Short description here
        owner:
          type: string
          example: jsbach
        ticket:
          type: string
          example: 2122
        qinq:
          type: integer
          example: 1
        wipe:
          type: boolean
          example: true
        ccuser:
          type: array
          items:
            type: string
          example: [edroste, kgodel]
        cloud_id:
          type: integer
          example: 12
        vlan_id:
          type: integer
          example: 12

    Schedule:
      type: object
      properties:
        start:
          type: string
          example: 2022-02-02T22:00
        end:
          type: string
          example: 2022-04-02T22:00
        build_start:
          type: string
          example: 2022-02-02T22:00
        build_end:
          type: string
          example: 2022-04-02T22:00
        assignment_id:
          type: integer
          example: 12
        host_id:
          type: integer
          example: 1
    Notification:
      type: object
      properties:
        fail:
          type: boolean
          example: false
        success:
          type: boolean
          example: false
        initial:
          type: boolean
          example: false
        pre_initial:
          type: boolean
          example: false
        pre:
          type: boolean
          example: false
        one_day:
          type: boolean
          example: false
        three_days:
          type: boolean
          example: false
        five_days:
          type: boolean
          example: false
        seven_days:
          type: boolean
          example: false
        assignment:
          type: integer
          example: 12
    Vlan:
      type: object
      properties:
        gateway:
          type: string
          example: 10.1.18.8
        ip_free:
          type: integer
          example: 256
        ip_range:
          type: string
        netmask:
          type: string
          example: 255.255.255.255
        vlan_id:
          type: integer
          example: 601
    Role:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          example: 12
        name:
          type: string
          example: admin
        description:
          type: string
          example: All access granted
    User:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: quads@example.com
        active:
          type: boolean
          example: true
        confirmed_at:
          type: string
          example: 1984-02-02T22:00
        auth_token:
          type: string
          example: 1984-02-02T22:00
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 400
          format: int32
        message:
          type: string
          example: Something went horribly wrong.
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
